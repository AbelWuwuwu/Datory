using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Dapper;
using SqlKata.Compilers;

[assembly: InternalsVisibleTo("Datory.Tests")]

namespace Datory.Utils
{
    internal static class SqlUtils
    {
        public static Compiler GetCompiler(Database database)
        {
            Compiler compiler = null;

            if (database.DatabaseType == DatabaseType.MySql)
            {
                compiler = new MySqlCompiler();
            }
            else if (database.DatabaseType == DatabaseType.SqlServer)
            {
                compiler = new SqlServerCompiler
                {
                    UseLegacyPagination = DatoryUtils.IsUseLegacyPagination(database)
                };
            }
            else if (database.DatabaseType == DatabaseType.PostgreSql)
            {
                compiler = new PostgresCompiler();
            }
            else if (database.DatabaseType == DatabaseType.Oracle)
            {
                compiler = new OracleCompiler
                {
                    UseLegacyPagination = DatoryUtils.IsUseLegacyPagination(database)
                };
            }

            return compiler;
        }

        public static string ColumnIncrement(DatabaseType databaseType, string columnName, int plusNum = 1)
        {
            var retVal = string.Empty;

            if (databaseType == DatabaseType.MySql)
            {
                retVal = $"IFNULL({columnName}, 0) + {plusNum}";
            }
            else if (databaseType == DatabaseType.SqlServer)
            {
                retVal = $"ISNULL({columnName}, 0) + {plusNum}";
            }
            else if (databaseType == DatabaseType.PostgreSql)
            {
                retVal = $"COALESCE({columnName}, 0) + {plusNum}";
            }
            else if (databaseType == DatabaseType.Oracle)
            {
                retVal = $"COALESCE({columnName}, 0) + {plusNum}";
            }

            return retVal;
        }

        public static string ColumnDecrement(DatabaseType databaseType, string columnName, int minusNum = 1)
        {
            var retVal = string.Empty;

            if (databaseType == DatabaseType.MySql)
            {
                retVal = $"IFNULL({columnName}, 0) - {minusNum}";
            }
            else if (databaseType == DatabaseType.SqlServer)
            {
                retVal = $"ISNULL({columnName}, 0) - {minusNum}";
            }
            else if (databaseType == DatabaseType.PostgreSql)
            {
                retVal = $"COALESCE({columnName}, 0) - {minusNum}";
            }
            else if (databaseType == DatabaseType.Oracle)
            {
                retVal = $"COALESCE({columnName}, 0) - {minusNum}";
            }

            return retVal;
        }

        public static string GetAutoIncrementDataType(DatabaseType databaseType, bool alterTable = false)
        {
            var retVal = string.Empty;

            if (databaseType == DatabaseType.MySql)
            {
                retVal = alterTable ? "INT AUTO_INCREMENT UNIQUE KEY" : "INT AUTO_INCREMENT";
            }
            else if (databaseType == DatabaseType.SqlServer)
            {
                retVal = "int IDENTITY (1, 1)";
            }
            else if (databaseType == DatabaseType.PostgreSql)
            {
                retVal = "SERIAL";
            }
            else if (databaseType == DatabaseType.Oracle)
            {
                retVal = "NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY";
            }

            return retVal;
        }

        private static string ToMySqlColumnString(DataType type, string attributeName, int length)
        {
            if (type == DataType.Boolean)
            {
                return $"`{attributeName}` tinyint(1)";
            }
            if (type == DataType.DateTime)
            {
                return $"`{attributeName}` datetime";
            }
            if (type == DataType.Decimal)
            {
                return $"`{attributeName}` decimal(18, 2)";
            }
            if (type == DataType.Integer)
            {
                return $"`{attributeName}` int";
            }
            if (type == DataType.Text)
            {
                return $"`{attributeName}` longtext";
            }
            return $"`{attributeName}` varchar({length})";
        }

        private static string ToSqlServerColumnString(DataType type, string attributeName, int length)
        {
            if (type == DataType.Boolean)
            {
                return $"[{attributeName}] [bit]";
            }
            if (type == DataType.DateTime)
            {
                return $"[{attributeName}] [datetime]";
            }
            if (type == DataType.Decimal)
            {
                return $"[{attributeName}] [decimal] (18, 2)";
            }
            if (type == DataType.Integer)
            {
                return $"[{attributeName}] [int]";
            }
            if (type == DataType.Text)
            {
                return $"[{attributeName}] [nvarchar] (max)";
            }
            return $"[{attributeName}] [nvarchar] ({length})";
        }

        private static string ToPostgreColumnString(DataType type, string attributeName, int length)
        {
            if (type == DataType.Boolean)
            {
                return $"{attributeName} bool";
            }
            if (type == DataType.DateTime)
            {
                return $"{attributeName} timestamptz";
            }
            if (type == DataType.Decimal)
            {
                return $"{attributeName} numeric(18, 2)";
            }
            if (type == DataType.Integer)
            {
                return $"{attributeName} int4";
            }
            if (type == DataType.Text)
            {
                return $"{attributeName} text";
            }
            return $"{attributeName} varchar({length})";
        }

        private static string ToOracleColumnString(DataType type, string attributeName, int length)
        {
            if (type == DataType.Boolean)
            {
                return $"{attributeName} number(1)";
            }
            if (type == DataType.DateTime)
            {
                return $"{attributeName} timestamp(6) with time zone";
            }
            if (type == DataType.Decimal)
            {
                return $"{attributeName} number(38, 2)";
            }
            if (type == DataType.Integer)
            {
                return $"{attributeName} number";
            }
            if (type == DataType.Text)
            {
                return $"{attributeName} nclob";
            }
            return $"{attributeName} nvarchar2({length})";
        }

        public static string GetColumnSqlString(DatabaseType databaseType, TableColumn tableColumn)
        {
            if (tableColumn.IsIdentity)
            {
                return $@"{tableColumn.AttributeName} {GetAutoIncrementDataType(databaseType)}";
            }

            if (databaseType == DatabaseType.MySql)
            {
                return ToMySqlColumnString(tableColumn.DataType, tableColumn.AttributeName, tableColumn.DataLength);
            }

            if (databaseType == DatabaseType.SqlServer)
            {
                return ToSqlServerColumnString(tableColumn.DataType, tableColumn.AttributeName, tableColumn.DataLength);
            }

            if (databaseType == DatabaseType.PostgreSql)
            {
                return ToPostgreColumnString(tableColumn.DataType, tableColumn.AttributeName, tableColumn.DataLength);
            }

            if (databaseType == DatabaseType.Oracle)
            {
                return ToOracleColumnString(tableColumn.DataType, tableColumn.AttributeName, tableColumn.DataLength);
            }

            return string.Empty;
        }

        public static string GetPrimaryKeySqlString(DatabaseType databaseType, string tableName, string attributeName)
        {
            return databaseType == DatabaseType.MySql
                ? $@"PRIMARY KEY ({attributeName})"
                : $@"CONSTRAINT PK_{tableName}_{attributeName} PRIMARY KEY ({attributeName})";
        }

        public static string GetQuotedIdentifier(DatabaseType databaseType, string identifier)
        {
            if (databaseType == DatabaseType.MySql)
            {
                return $"`{identifier}`";
            }

            return databaseType == DatabaseType.SqlServer ? $"[{identifier}]" : identifier;
        }

        private static DataType ToMySqlDataType(string dataTypeStr)
        {
            if (string.IsNullOrEmpty(dataTypeStr)) return DataType.VarChar;

            var dataType = DataType.VarChar;

            dataTypeStr = Utilities.TrimAndToLower(dataTypeStr);
            switch (dataTypeStr)
            {
                case "bit":
                    dataType = DataType.Boolean;
                    break;
                case "datetime":
                    dataType = DataType.DateTime;
                    break;
                case "decimal":
                    dataType = DataType.Decimal;
                    break;
                case "int":
                    dataType = DataType.Integer;
                    break;
                case "longtext":
                    dataType = DataType.Text;
                    break;
                case "nvarchar":
                    dataType = DataType.VarChar;
                    break;
                case "text":
                    dataType = DataType.Text;
                    break;
                case "varchar":
                    dataType = DataType.VarChar;
                    break;
            }

            return dataType;
        }

        private static DataType ToSqlServerDataType(string dataTypeStr, string dataLength)
        {
            if (string.IsNullOrEmpty(dataTypeStr)) return DataType.VarChar;

            var dataType = DataType.VarChar;

            dataTypeStr = Utilities.TrimAndToLower(dataTypeStr);
            dataLength = Utilities.TrimAndToLower(dataLength);
            switch (dataTypeStr)
            {
                case "bit":
                    dataType = DataType.Boolean;
                    break;
                case "datetime":
                    dataType = DataType.DateTime;
                    break;
                case "datetime2":
                    dataType = DataType.DateTime;
                    break;
                case "datetimeoffset":
                    dataType = DataType.DateTime;
                    break;
                case "decimal":
                    dataType = DataType.Decimal;
                    break;
                case "int":
                    dataType = DataType.Integer;
                    break;
                case "ntext":
                    dataType = DataType.Text;
                    break;
                case "nvarchar":
                    dataType = dataLength == "max" ? DataType.Text : DataType.VarChar;
                    break;
                case "text":
                    dataType = DataType.Text;
                    break;
                case "varchar":
                    dataType = DataType.VarChar;
                    break;
            }

            return dataType;
        }

        private static DataType ToPostgreSqlDataType(string dataTypeStr)
        {
            if (string.IsNullOrEmpty(dataTypeStr)) return DataType.VarChar;

            var dataType = DataType.VarChar;

            dataTypeStr = Utilities.TrimAndToLower(dataTypeStr);
            switch (dataTypeStr)
            {
                case "varchar":
                    dataType = DataType.VarChar;
                    break;
                case "bool":
                    dataType = DataType.Boolean;
                    break;
                case "timestamptz":
                    dataType = DataType.DateTime;
                    break;
                case "numeric":
                    dataType = DataType.Decimal;
                    break;
                case "int4":
                    dataType = DataType.Integer;
                    break;
                case "text":
                    dataType = DataType.Text;
                    break;
            }

            return dataType;
        }

        private static DataType ToOracleDataType(string dataTypeStr)
        {
            if (string.IsNullOrEmpty(dataTypeStr)) return DataType.VarChar;

            var dataType = DataType.VarChar;

            dataTypeStr = Utilities.TrimAndToUpper(dataTypeStr);
            if (dataTypeStr.StartsWith("TIMESTAMP("))
            {
                dataType = DataType.DateTime;
            }
            else if (dataTypeStr == "NUMBER")
            {
                dataType = DataType.Integer;
            }
            else if (dataTypeStr == "NCLOB")
            {
                dataType = DataType.Text;
            }
            else if (dataTypeStr == "NVARCHAR2")
            {
                dataType = DataType.VarChar;
            }
            else if (dataTypeStr == "CLOB")
            {
                dataType = DataType.Text;
            }
            else if (dataTypeStr == "VARCHAR2")
            {
                dataType = DataType.VarChar;
            }

            return dataType;
        }

        public static List<TableColumn> GetOracleColumns(Database database, string tableName)
        {
            var owner = database.Owner.ToUpper();
            tableName = tableName.ToUpper();

            var list = new List<TableColumn>();
            var sqlString =
                $"SELECT COLUMN_NAME AS columnName, DATA_TYPE AS DataType, DATA_PRECISION AS DataPrecision, DATA_SCALE AS DataScale, CHAR_LENGTH AS CharLength, DATA_DEFAULT AS DataDefault FROM all_tab_cols WHERE OWNER = '{owner}' and table_name = '{tableName}' and user_generated = 'YES' ORDER BY COLUMN_ID";

            IEnumerable<dynamic> columns = database.Connection.Query<dynamic>(sqlString);

            foreach (var column in columns)
            {
                var columnName = column.columnName;
                var dataType = ToOracleDataType(column.DataType);
                var percision = column.DataPrecision;
                var scale = column.DataScale;
                var charLength = column.CharLength;
                var dataDefault = column.DataDefault;

                if (dataType == DataType.Integer)
                {
                    if (scale == 2)
                    {
                        dataType = DataType.Decimal;
                    }
                    else if (percision == 1)
                    {
                        dataType = DataType.Boolean;
                    }
                }
                var isIdentity = dataDefault.Contains(".nextval");

                var info = new TableColumn
                {
                    AttributeName = columnName,
                    DataType = dataType,
                    DataLength = charLength,
                    IsPrimaryKey = false,
                    IsIdentity = isIdentity
                };
                list.Add(info);
            }

            sqlString =
                $@"select distinct cu.column_name from all_cons_columns cu inner join all_constraints au 
on cu.constraint_name = au.constraint_name
and au.constraint_type = 'P' and cu.OWNER = '{owner}' and cu.table_name = '{tableName}'";

            var columnNames = database.Connection.Query<string>(sqlString);
            foreach (var columnName in columnNames)
            {
                foreach (var tableColumnInfo in list)
                {
                    if (columnName != tableColumnInfo.AttributeName) continue;
                    tableColumnInfo.IsPrimaryKey = true;
                    break;
                }
            }

            return list;
        }

        public static List<TableColumn> GetPostgreSqlColumns(Database database, string tableName)
        {
            var list = new List<TableColumn>();
            var sqlString =
                $"SELECT COLUMN_NAME AS ColumnName, UDT_NAME AS UdtName, CHARACTER_MAXIMUM_LENGTH AS CharacterMaximumLength, COLUMN_DEFAULT AS ColumnDefault FROM information_schema.columns WHERE table_catalog = '{database.Name}' AND table_name = '{tableName.ToLower()}' ORDER BY ordinal_position";

            var columns = database.Connection.Query<dynamic>(sqlString);
            foreach (var column in columns)
            {
                var columnName = column.ColumnName;
                var udtName = column.UdtName;
                var characterMaximumLength = column.CharacterMaximumLength;
                var columnDefault = column.ColumnDefault;

                var dataType = ToPostgreSqlDataType(udtName);
                var length = characterMaximumLength;

                var isIdentity = columnDefault.StartsWith("nextval(");

                var info = new TableColumn
                {
                    AttributeName = columnName,
                    DataType = dataType,
                    DataLength = length,
                    IsPrimaryKey = false,
                    IsIdentity = isIdentity
                };
                list.Add(info);
            }

            sqlString =
                $"select column_name AS ColumnName, constraint_name AS ConstraintName from information_schema.key_column_usage where table_catalog = '{database.Name}' and table_name = '{tableName.ToLower()}';";

            var rows = database.Connection.Query<dynamic>(sqlString);
            foreach (var row in rows)
            {
                var columnName = row.ColumnName;
                var constraintName = row.ConstraintName;

                var isPrimary = constraintName.StartsWith("pk");

                if (isPrimary)
                {
                    foreach (var tableColumnInfo in list)
                    {
                        if (columnName == tableColumnInfo.AttributeName)
                        {
                            tableColumnInfo.IsPrimaryKey = true;
                            break;
                        }
                    }
                }
            }

            return list;
        }

        public static List<TableColumn> GetSqlServerColumns(Database database, string tableName)
        {
            var sqlString =
                $"select id from [{database.Name}]..sysobjects where type = 'U' and category <> 2 and name = '{tableName}'";

            var tableId = database.Connection.QueryFirstOrDefault<string>(sqlString);
            if (string.IsNullOrEmpty(tableId)) return new List<TableColumn>();

            var list = new List<TableColumn>();
            var isIdentityExist = false;

            sqlString =
                $"select C.name AS ColumnName, T.name AS DataTypeName, C.length AS Length, C.colstat AS IsPrimaryKeyInt, case when C.autoval is null then 0 else 1 end AS IsIdentityInt from systypes T, syscolumns C where C.id = {tableId} and C.xtype = T.xusertype order by C.colid";

            var columns = database.Connection.Query<dynamic>(sqlString);
            foreach (var column in columns)
            {
                var columnName = column.ColumnName;
                if (columnName == "msrepl_tran_version")
                {
                    continue;
                }

                var dataTypeName = column.DataTypeName;
                var length = column.Length;
                var dataType = ToSqlServerDataType(dataTypeName, Convert.ToString(length));
                length = dataType == DataType.VarChar ? length : 0;
                var isPrimaryKeyInt = column.IsPrimaryKeyInt;
                var isIdentityInt = column.IsIdentityInt;

                var isPrimaryKey = isPrimaryKeyInt == 1;
                //var isIdentity = isIdentityInt == 1 || StringUtils.EqualsIgnoreCase(columnName, "Id");
                var isIdentity = isIdentityInt == 1;
                if (isIdentity)
                {
                    isIdentityExist = true;
                }

                var info = new TableColumn
                {
                    AttributeName = columnName,
                    DataType = dataType,
                    DataLength = length,
                    IsPrimaryKey = isPrimaryKey,
                    IsIdentity = isIdentity
                };
                list.Add(info);
            }

            if (!isIdentityExist)
            {
                sqlString = $"select name from syscolumns where id = object_id(N'{tableName}') and COLUMNPROPERTY(id, name,'IsIdentity')= 1";

                var clName = database.Connection.QueryFirstOrDefault<string>(sqlString);
                foreach (var info in list)
                {
                    if (clName == info.AttributeName)
                    {
                        info.IsIdentity = true;
                    }
                }
            }

            return list;
        }

        public static List<TableColumn> GetMySqlColumns(Database database, string tableName)
        {
            var list = new List<TableColumn>();

            var sqlString =
                $"select COLUMN_NAME AS ColumnName, DATA_TYPE AS DataType, CHARACTER_MAXIMUM_LENGTH AS DataLength, COLUMN_KEY AS ColumnKey, EXTRA AS Extra from information_schema.columns where table_schema = '{database.Name}' and table_name = '{tableName}' order by table_name,ordinal_position; ";

            using (var rdr = database.Connection.ExecuteReader(sqlString))
            {
                while (rdr.Read())
                {
                    var columnName = rdr.IsDBNull(0) ? string.Empty : rdr.GetString(0);
                    var dataType = ToMySqlDataType(rdr.IsDBNull(1) ? string.Empty : rdr.GetString(1));
                    var length = rdr.IsDBNull(2) || dataType == DataType.Text ? 0 : Convert.ToInt32(rdr.GetValue(2));
                    var isPrimaryKey = Convert.ToString(rdr.GetValue(3)) == "PRI";
                    var isIdentity = Convert.ToString(rdr.GetValue(4)) == "auto_increment";

                    var info = new TableColumn
                    {
                        AttributeName = columnName,
                        DataType = dataType,
                        DataLength = length,
                        IsPrimaryKey = isPrimaryKey,
                        IsIdentity = isIdentity
                    };
                    list.Add(info);
                }
                rdr.Close();
            }

            //var columns = database.Connection.Query<dynamic>(sqlString);
            //foreach (var column in columns)
            //{
            //    var columnName = column.ColumnName;
            //    var dataType = ToMySqlDataType(column.DataType);
            //    var dataLength = column.DataLength;

            //    var length = dataLength == null || dataType == DataType.Text ? 0 : dataLength;

            //    var isPrimaryKey = Convert.ToString(column.ColumnKey) == "PRI";
            //    var isIdentity = Convert.ToString(column.Extra) == "auto_increment";

            //    var info = new TableColumn
            //    {
            //        AttributeName = columnName,
            //        DataType = dataType,
            //        DataLength = length,
            //        IsPrimaryKey = isPrimaryKey,
            //        IsIdentity = isIdentity
            //    };
            //    list.Add(info);

            //}

            return list;
        }

        public static string GetAddColumnsSqlString(DatabaseType databaseType, string tableName, string columnsSqlString)
        {
            var columns = databaseType == DatabaseType.MySql ? $"({columnsSqlString})" : columnsSqlString;

            return $"ALTER TABLE {GetQuotedIdentifier(databaseType, tableName)} ADD " + columns;
        }

        public static string GetDropColumnsSqlString(DatabaseType databaseType, string tableName, string columnName)
        {
            return $"ALTER TABLE {GetQuotedIdentifier(databaseType, tableName)} DROP COLUMN {GetQuotedIdentifier(databaseType, columnName)}";
        }
    }
}
